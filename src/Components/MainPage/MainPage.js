import React from 'react'
import { MainContainer, Form, Input } from './styles'
import { useState } from 'react'

function MainPage() {
  const [nome, setNome] = useState("")
  const [idade, setIdade] = useState("")
  const [email, setEmail] = useState("")
  const [usuario, setUsuario] = useState({})


  const onChangeNome = (event) => {
    setNome(event.target.value);
    console.log(nome);
  }

  const onChangeIdade = (event) => {
    setIdade(event.target.value);
    console.log(idade);
  }

  const onChangeEmail = (event) => {
    setEmail(event.target.value);
    console.log(email);
  }

  function enviaDados () {

    const novoFormulario = {
      Nome: nome,  /*  Se o nome da minha propriedade for exatamente o mesmo nome do meu valor eu posso omitir um deles */
      Idade: idade,
      Email: email,
    }

    setUsuario(novoFormulario)

    console.log(novoFormulario)

    setNome("")
    setIdade("")
    setEmail("")
  }

  return (
    <MainContainer>
      <h2>Formul√°rio de inscri√ß√£o</h2>
      <Form>
        <label>
          Nome:
          <Input value={nome} onChange={onChangeNome} />
        </label>
        <label>
          Idade:
          <Input value={idade} onChange={onChangeIdade} />
        </label>
        <label>
          E-mail:
          <Input value={email} onChange={onChangeEmail} />
        </label>
        <button onClick={enviaDados}>Enviar dados</button>
      </Form>
    </MainContainer>
  )
}

export default MainPage

/* Na fun√ß√£o de onChange temos que setar o nosso estado, que √© o valor do nosso input, com o que o usu√°rio est√° digitando, que √© o event.target.value. Toda vez que o usu√°rio digitar nome, o input sabe que no onChange, na mudan√ßa desse input, eu vou setar no meu estado nome o que o usu√°rio est√° digitando, e a√≠ fica guardada para usarmos essa informa√ß√£o. 
 
Quando eu insiro o onChange no input, eu estou avisando o input que, quando houver alguma altera√ß√£o no input, ele precisa executar a fun√ß√£o que est√° entre as chaves no onchange do Input. Usamos essa fun√ß√£o para setar o estado, que √© o value (valor) do input */


/* A Import√¢ncia da t√©cnica de Input Controlado

No contexto do React, o termo "input controlado" refere-se a uma **t√©cnica de gerenciamento de formul√°rios** em que os valores de entrada dos elementos do formul√°rio (como inputs, selects e checkboxes) **s√£o controlados pelo estado do componente React.**

Em outras palavras, em vez de permitir que o DOM gerencie diretamente o estado do formul√°rio, como fizemos **no v√≠deo** deste  [conte√∫do sobre DOM](https://www.notion.so/2bac039189ec41919898717bc734be85?pvs=21), agora o React mant√©m o controle do estado do formul√°rio e usa seus pr√≥prios manipuladores de eventos (onChange, onSubmit‚Ä¶) para atualizar o estado do formul√°rio. 

Por exemplo, se voc√™ tiver um componente React com um input, pode definir o valor desse input como uma propriedade do estado do componente. 

function MeuComponente() {
  **const [valorInput, setValorInput] = useState('');**

  return (
    <div>
      <label htmlFor="meu-input">Digite um valor:</label>
      <input
        type="text"
        id="meu-input"
        **value={valorInput}**
      />
      <p>O valor digitado foi: {valorInput}</p>
    </div>
  );
}
```

Em seguida, voc√™ pode definir um manipulador de eventos para atualizar o estado do componente sempre que o valor do input mudar.

function MeuComponente() {
  const [valorInput, **setValorInput**] = useState('');

  **const handleChange = (event) => {
    setValorInput(event.target.value);
  };**

  return (
    <div>
      <label htmlFor="meu-input">Digite um valor:</label>
      <input
        type="text"
        id="meu-input"
        value={valorInput}
        **onChange={handleChange}**
      />
      <p>O valor digitado foi: {valorInput}</p>
    </div>
  );
}
```

Dessa forma, o estado do componente √© sempre sincronizado com o valor do input e voc√™ pode acessar o valor do input no estado do componente a qualquer momento.

O uso de inputs controlados √© uma t√©cnica importante para construir formul√°rios no React porque permite que voc√™ gerencie de forma mais granular a  formata√ß√£o e manipula√ß√£o de dados de  formul√°rios em um site por exemplo. 

Al√©m disso, o uso de inputs controlados ajuda a evitar problemas comuns em formul√°rios, como campos em branco, valores inv√°lidos e submiss√µes acidentais.

!https://jschris.com/0988e0e5975472dc7fe616d48f906494/project.gif

# Resumo

1. A t√©cnica de input controlado permite que os valores dos elementos de formul√°rio sejam controlados pelo estado do componente React.
2. O React mant√©m o controle do estado do formul√°rio e usa seus pr√≥prios manipuladores de eventos para atualizar o estado do formul√°rio.
3. A defini√ß√£o do valor do input como uma propriedade do estado do componente ajuda a manter o estado sincronizado com o valor do input.
4. O uso de inputs controlados √© importante para gerenciar de forma granular a formata√ß√£o e manipula√ß√£o de dados de formul√°rios em um site.
5. Inputs controlados ajudam a evitar problemas comuns em formul√°rios, como campos em branco, valores inv√°lidos e submiss√µes acidentais.
*/

/* # Aprendendo a usar Inputs Controlados em React

Podemos dizer que o input do HTML j√° possui um estado pr√≥prio (atributo value). Para trabalhar com ele corretamente no React, queremos que o **nosso componente controle o estado do input.** Essa t√©cnica √© chamada de **inputs controlados.**

1. Cada input ser√° representado por uma vari√°vel do estado;

const [inputName, setInputName] = useState("")
const [inputEmail, setInputEmail] = useState("")

2. Essa vari√°vel define o valor(value) do input;

<input value={inputName}/>
<input value={inputEmail}/>

3. Toda vez que o input muda, o estado deve ser atualizado; 
- Isso √© feito atrav√©s do evento onChange() ;

<input 
value={inputName}
onChange={handleInputName}
/>

- A fun√ß√£o que passamos para o `**onChange**` recebe um **event** como par√¢metro;
- O event √© um objeto que possui o **valor (value) do input**, basta acessar por `event.target.value` 

const handleInputName = (event) => {
	setInputName(event.target.value)
}

Voc√™ tem a impress√£o que o input est√° agindo da mesma maneira que no caso anterior, com o input n√£o controlado, mas na realidade o que acontece por tr√°s √© diferente.

O input manda o novo valor pro estado, e o estado faz o componente renderizar o input novamente com seu valor novo.

üí° **Ele n√£o muda sozinho, ele manda o estado mudar seu valor.**

√Ä primeira vista, parece que o input controlado √© mais complicado. De fato, √© muito mais¬†**verboso**¬†(voc√™ precisa escrever c√≥digo a mais, pois precisa salvar o valor), mas ele √© muito mais poderoso, e faz mais sentido pela forma com que o React funciona.

üí° O React foi desenhado para ser reativo, isto √©, **a cada altera√ß√£o do estado ou das props, o React ir√° renderizar a tela novamente.**

Ent√£o agora entenda o caso: voc√™ tem um input que tem um valor pr√© definido,ou seja, um valor que j√° vem preenchido no primeiro render:

const Component = () => {
  return <input type="text" value="Astrodev" />;
};

Eu n√£o vou conseguir alterar seu valor, pois o React entende que aquele valor deveria ser ‚ÄúAstrodev‚Äù. O¬†React identifica que quando um input √© montado com um¬†value¬†pr√© definido, este √© um¬†input controlado.¬†Ent√£o agora ele s√≥ se atualiza por mando de algum lugar externo. Neste caso, o nosso estado.

# **Pra ficar na mente: Lembre-se que para controlar um input, precisamos sempre fazer 3 coisas:**

1. Declarar um estado para armazenar o valor do input
2. Adicionar a vari√°vel de estado no `**value**` do input
3. Criar uma fun√ß√£o de onChange

# Usando input controlado no Select

A tag `<select>` permite escolher algumas op√ß√µes pr√©-selecionados dentro de um menu. Esta op√ß√µes devem estar dentro desta `<select>` tag e envolvido pela tag `<options>`.  Para controlar o input, basta incluir o `value` e o `onChange` na tag select, desta forma o value recebera o valor dentro dos `options`.

Vejo um exemplo abaixo:

const Component = () => {
	const [estadoCivil, setEstadoCivil] = useState("");

	const mudarEstadoCivil = (event) => {
	    setEstadoCivil(event.target.value);
	  };

	return(
		<select value={estadoCivil} onChange={mudarEstadoCivil}>
			<option>Solteiro(a)</option>
			<option>Casado(a)</option>
			<option>Vi√∫vo(a)</option>
			<option>Divorciado(a)</option>
		</select>
	)
}

### Poss√≠veis bugs:

- **N√£o consigo digitar no meu input:**
    
    ***Poss√≠veis motivos:*** 
    
    *1 - Voc√™ n√£o aplicou um dos 3 passos. Verifique se a propriedade `value` est√° aplicada ao input e se o valor atribu√≠do a ele √© o `useState` que voc√™ criou.*
    
    *2 - Voc√™ n√£o atribuiu uma string vazia como valor inicial do input no `useState`. Ele deve ter esse formato: `const [meuInput, setInput] = useState("")`*
    
- **N√£o sei se minha fun√ß√£o de onChange est√° funcionando**
    
     **Poss√≠veis solu√ß√µes:**
    1 - Escreva um `console.log( )` dentro da sua fun√ß√£o de onChange e verifique se voc√™ usou o `event` como par√¢metro dessa fun√ß√£o. Fa√ßa um console de `event.target.value`.

    
    ## Resumo

1. Represente cada input por uma vari√°vel de estado usando o **`useState()`**;
2. Defina o valor (value) do input usando o estado;
3. Atualize o estado do input toda vez que o input muda, usando o evento **`onChange()`** e uma fun√ß√£o para atualizar o estado;
4. Mude o valor do estado do input usando o **`event.target.value`**;
5. Inclua as propriedades **`value`** e **`onChange`** na tag **`<select>`** para controlar as op√ß√µes pr√©-selecionadas em um menu.
6. A forma de controlar inputs  √© semelhante mesmo em tags diferentes, como <input/> e <select>
*/